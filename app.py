import streamlit as st
import pandas as pd
from datetime import datetime
from pathlib import Path
from PIL import Image as PILImage
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
from reportlab.lib.colors import HexColor, black, lightgrey, white, darkgrey
from reportlab.platypus import Table, TableStyle, Paragraph
from reportlab.lib.styles import ParagraphStyle, getSampleStyleSheet
import os
import io
import json
import yagmail
import tempfile
import shutil

# --- IN√çCIO DO BLOCO DE DEBUG ---
st.write("DEBUG: Aplica√ß√£o Streamlit iniciada. Ponto 1.")
st.write(f"DEBUG: Caminho da logo de login: {st.session_state.get('LOGO_LOGIN_PATH', 'N√£o definido')}")
st.write(f"DEBUG: Caminho da logo PDF: {st.session_state.get('LOGO_PDF_PATH', 'N√£o definido')}")
st.write(f"DEBUG: Caminho da logo √≠cone: {st.session_state.get('LOGO_ICON_PATH', 'N√£o definido')}")

# Google API imports
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseUpload
from googleapiclient.errors import HttpError

# Autentica√ß√£o de Usu√°rio imports
import sqlite3
import hashlib
import base64

# ‚úÖ CONSTANTES
# ID da pasta no Google Drive onde os arquivos CSV e PDFs ser√£o armazenados
# Substitua pelo ID real da sua pasta no Google Drive
# Certifique-se de que este ID est√° tamb√©m no seu .streamlit/secrets.toml sob [google_drive] folder_id = "SEU_ID"
DRIVE_FOLDER_ID = st.secrets["google_drive"]["folder_id"] 
# Caminhos para as logos (ajuste se necess√°rio. Devem estar na mesma pasta do app.py)
LOGO_LOGIN_PATH = "LOGO RDV AZUL.jpeg" # Para a tela de login
LOGO_PDF_PATH = "LOGO_RDV_AZUL-sem fundo.png" # Para o cabe√ßalho do PDF
LOGO_ICON_PATH = "LOGO_RDV_AZUL-sem fundo.png" # Usando a mesma logo do PDF para o √≠cone da p√°gina

# ‚úÖ CONFIGURA√á√ÉO STREAMLIT
st.set_page_config(
    page_title="RDV Engenharia - Relat√≥rio Di√°rio de Obra",
    page_icon=PILImage.open(LOGO_ICON_PATH) if os.path.exists(LOGO_ICON_PATH) else "üë∑‚Äç‚ôÇÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ‚úÖ FUN√á√ïES AUXILIARES DE IMAGEM
@st.cache_data(ttl=3600)
def get_img_as_base64(file_path):
    """Carrega uma imagem e a converte para base64 para uso em Markdown/HTML."""
    try:
        with open(file_path, "rb") as f:
            return base64.b64encode(f.read()).decode()
    except FileNotFoundError:
        st.error(f"Erro: Arquivo de imagem n√£o encontrado em {file_path}. Verifique o caminho.")
        return None
    except Exception as e:
        st.error(f"Erro ao carregar imagem {file_path}: {e}")
        return None

# Vari√°vel global para armazenar o caminho tempor√°rio do √≠cone (se usado) para limpeza
temp_icon_path_for_cleanup = None

def clear_icon_temp_file():
    """Tenta limpar o arquivo tempor√°rio usado para o √≠cone da p√°gina."""
    global temp_icon_path_for_cleanup
    if temp_icon_path_for_cleanup and os.path.exists(temp_icon_path_for_cleanup):
        try:
            os.remove(temp_icon_path_for_cleanup)
            temp_icon_path_for_cleanup = None # Reset
            # st.info("Arquivo tempor√°rio do √≠cone limpo com sucesso.") # Para depura√ß√£o
        except Exception as e:
            st.warning(f"Erro ao tentar limpar arquivo tempor√°rio do √≠cone: {str(e)}. Por favor, verifique os logs.")

# ‚úÖ FUN√á√ïES AUXILIARES DE AUTENTICA√á√ÉO (SQLite)
DB_NAME = "users.db" # Nome do arquivo do banco de dados SQLite

def make_hashes(password):
    """Gera um hash SHA256 da senha."""
    return hashlib.sha256(str.encode(password)).hexdigest()

def check_hashes(password, hashed_password):
    """Verifica se a senha fornecida corresponde ao hash armazenado."""
    return make_hashes(password) == hashed_password

def create_usertable():
    """Cria a tabela de usu√°rios se ela n√£o existir no banco de dados."""
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS userstable (
            username TEXT UNIQUE,
            password TEXT,
            role TEXT
        )
    ''')
    conn.commit()
    conn.close()

def add_userdata(username, password, role="user"):
    """Adiciona um novo usu√°rio ao banco de dados."""
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    try:
        c.execute('INSERT INTO userstable (username, password, role) VALUES (?,?,?)', (username, password, role))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        # st.error(f"Usu√°rio '{username}' j√° existe.") # Comentado para evitar erro duplicado na UI
        return False
    finally:
        conn.close()

def login_user(username, password):
    """Tenta autenticar um usu√°rio e retorna suas informa√ß√µes (usu√°rio e fun√ß√£o) se bem-sucedido."""
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('SELECT * FROM userstable WHERE username = ?', (username,))
    data = c.fetchone()
    conn.close()
    if data:
        if check_hashes(password, data[1]):
            return {"username": data[0], "role": data[2]}
    return None

def view_all_users():
    """Retorna uma lista de todos os usu√°rios registrados (apenas nome e fun√ß√£o)."""
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('SELECT username, role FROM userstable') # N√£o retornar o hash da senha por seguran√ßa
    data = c.fetchall()
    conn.close()
    return data

# ‚úÖ FUN√á√ïES AUXILIARES GOOGLE DRIVE
@st.cache_resource(ttl=3600)
def get_drive_service():
    """Autentica com o Google Drive API usando st.secrets."""
    try:
        creds = service_account.Credentials.from_service_account_info(
            st.secrets["gcp_service_account"],
            scopes=['https://www.googleapis.com/auth/drive']
        )
        return build('drive', 'v3', credentials=creds)
    except Exception as e:
        st.error(f"Erro ao autenticar com o Google Drive: {e}")
        st.info("Verifique se o `secrets.toml` est√° configurado corretamente com as credenciais da conta de servi√ßo do GCP.")
        return None

@st.cache_data(ttl=3600) # Cache para n√£o recarregar os dados do Drive a cada intera√ß√£o
def load_data_from_drive(folder_id, file_name):
    """Carrega um arquivo CSV do Google Drive e retorna um DataFrame."""
    service = get_drive_service()
    if not service:
        return pd.DataFrame()

    try:
        query = f"name = '{file_name}' and '{folder_id}' in parents and trashed = false"
        results = service.files().list(q=query, fields="files(id, name)").execute()
        items = results.get('files', [])

        if not items:
            # st.warning(f"Arquivo '{file_name}' n√£o encontrado na pasta do Google Drive (ID: {folder_id}).") # Comentado para n√£o poluir a UI
            return pd.DataFrame()

        file_id = items[0]['id']

        request = service.files().get_media(fileId=file_id)
        file_content = io.BytesIO(request.execute())
        
        return pd.read_csv(file_content)

    except HttpError as error:
        st.error(f"Erro ao acessar o Google Drive (HTTP) para '{file_name}': {error}")
        st.info("Verifique se o servi√ßo do Drive est√° configurado e se as permiss√µes est√£o corretas para a conta de servi√ßo.")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"Erro ao carregar '{file_name}' do Google Drive: {e}")
        return pd.DataFrame()

def create_drive_folder_if_not_exists(service, parent_folder_id, folder_name):
    """Cria uma pasta no Google Drive se ela n√£o existir e retorna seu ID."""
    try:
        query = f"name = '{folder_name}' and '{parent_folder_id}' in parents and mimeType = 'application/vnd.google-apps.folder' and trashed = false"
        results = service.files().list(q=query, fields="files(id, name)").execute()
        items = results.get('files', [])

        if items:
            return items[0]['id'] # Pasta j√° existe

        file_metadata = {
            'name': folder_name,
            'mimeType': 'application/vnd.google-apps.folder',
            'parents': [parent_folder_id]
        }
        folder = service.files().create(body=file_metadata, fields='id').execute()
        return folder.get('id')
    except Exception as e:
        st.error(f"Erro ao criar/verificar pasta '{folder_name}' no Google Drive: {e}")
        return None

def upload_file_to_drive(service, folder_id, file_name, file_content_bytes, mime_type):
    """Faz upload de um arquivo para o Google Drive."""
    try:
        file_metadata = {
            'name': file_name,
            'parents': [folder_id]
        }
        media = MediaIoBaseUpload(io.BytesIO(file_content_bytes), mimetype=mime_type, resumable=True)
        
        uploaded_file = service.files().create(body=file_metadata, media_body=media, fields='id').execute()
        return uploaded_file.get('id')
    except HttpError as error:
        st.error(f"Erro ao fazer upload para o Google Drive (HTTP): {error}")
        st.info("Verifique as permiss√µes da conta de servi√ßo para escrita na pasta.")
        return None
    except Exception as e:
        st.error(f"Erro desconhecido ao fazer upload para o Google Drive: {e}")
        return None

# ‚úÖ FUN√á√ÉO AUXILIAR DE ENVIO DE E-MAIL
def send_email(subject, html_body, recipients, attachments=None):
    """Envia um e-mail com HTML e anexos."""
    try:
        yag = yagmail.SMTP({st.secrets["gmail"]["username"]: st.secrets["gmail"]["sender_name"]},
                           st.secrets["gmail"]["app_password"])

        yag.send(
            to=recipients,
            subject=subject,
            contents=html_body,
            attachments=attachments
        )
        return True
    except Exception as e:
        st.error(f"Falha ao enviar e-mail: {e}")
        st.info("""
        Verifique as configura√ß√µes de e-mail no seu `secrets.toml`:
        1. `username` deve ser seu endere√ßo de e-mail completo (ex: `seu.email@gmail.com`).
        2. `app_password` deve ser uma **Senha de Aplicativo (App Password)**, n√£o sua senha normal do Gmail.
           Para gerar uma senha de aplicativo: V√° em Configura√ß√µes da Conta Google -> Seguran√ßa -> Verifica√ß√£o em duas etapas (deve estar ativada) -> Senhas de app.
        """)
        return False

# ‚úÖ FUN√á√ÉO AUXILIAR DE GERA√á√ÉO DE PDF
def generate_pdf(data, efetivo_lista, buffer, image_paths, drive_service, drive_folder_id):
    """
    Gera o relat√≥rio di√°rio de obra em PDF.
    data: dicion√°rio com os dados gerais do relat√≥rio.
    efetivo_lista: lista de dicion√°rios com os dados dos colaboradores.
    buffer: BytesIO object para escrever o PDF.
    image_paths: lista de caminhos para as imagens a serem inclu√≠das.
    drive_service: servi√ßo autenticado do Google Drive (n√£o diretamente usado aqui, mas passado para consist√™ncia).
    drive_folder_id: ID da pasta raiz no Drive (n√£o diretamente usado aqui, mas passado para consist√™ncia).
    """
    c = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4

    # Estilos de par√°grafo
    styles = getSampleStyleSheet()
    normal_style = styles['Normal']
    normal_style.fontSize = 10
    normal_style.leading = 12

    heading_style = ParagraphStyle(
        'HeadingStyle',
        parent=styles['h2'],
        fontSize=14,
        alignment=1, # Centro
        spaceAfter=10,
        textColor=HexColor('#004A7F') # Azul RDV
    )

    subheading_style = ParagraphStyle(
        'SubHeadingStyle',
        parent=styles['h3'],
        fontSize=12,
        spaceAfter=5,
        textColor=HexColor('#004A7F')
    )

    # Coordenadas iniciais
    y_pos = height - 50
    margin = 50

    # Cabe√ßalho da p√°gina
    def draw_header(canvas_obj, y_start):
        logo_path = LOGO_PDF_PATH
        if os.path.exists(logo_path):
            try:
                logo = ImageReader(logo_path)
                logo_width = 80 # Ajuste conforme necess√°rio
                logo_height = 80 * (logo.getSize()[1] / logo.getSize()[0]) # Proporcional
                canvas_obj.drawImage(logo, margin, y_start - logo_height / 2, width=logo_width, height=logo_height, mask='auto')
            except Exception as e:
                st.warning(f"N√£o foi poss√≠vel carregar a logo para o PDF: {e}")
        
        canvas_obj.setFont("Helvetica-Bold", 18)
        canvas_obj.setFillColor(HexColor('#004A7F')) # Azul RDV
        canvas_obj.drawString(margin + 90, y_start - 10, "Relat√≥rio Di√°rio de Obra")
        canvas_obj.setFont("Helvetica", 10)
        canvas_obj.drawString(margin + 90, y_start - 25, "RDV Engenharia")
        canvas_obj.setStrokeColor(HexColor('#004A7F'))
        canvas_obj.line(margin, y_start - 40, width - margin, y_start - 40) # Linha divis√≥ria
        return y_start - 60 # Nova posi√ß√£o Y

    y_pos = draw_header(c, y_pos)

    # Dados Gerais
    c.setFillColor(black)
    p = Paragraph("Dados Gerais da Obra", subheading_style)
    p.wrapOn(c, width - 2 * margin, height)
    p.drawOn(c, margin, y_pos - p.height)
    y_pos -= (p.height + 5)

    data_rows = [
        ["**Obra:**", data.get("Obra", "")],
        ["**Local:**", data.get("Local", "")],
        ["**Data:**", data.get("Data", "")],
        ["**Contrato:**", data.get("Contrato", "")],
        ["**Condi√ß√µes do dia:**", data.get("Clima", "")],
        ["**M√°quinas e equipamentos utilizados:**", data.get("Maquinas", "")],
        ["**Servi√ßos executados no dia:**", data.get("Servicos", "")],
    ]
    
    table_style = TableStyle([
        ('BACKGROUND', (0, 0), (-1, -1), white),
        ('TEXTCOLOR', (0, 0), (-1, -1), black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
        ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
        ('GRID', (0, 0), (-1, -1), 0.5, lightgrey),
        ('LEFTPADDING', (0,0), (-1,-1), 5),
        ('RIGHTPADDING', (0,0), (-1,-1), 5),
        ('TOPPADDING', (0,0), (-1,-1), 5),
        ('BOTTOMPADDING', (0,0), (-1,-1), 5),
    ])

    # Para lidar com quebras de linha em textos longos
    formatted_data_rows = []
    for row in data_rows:
        key_p = Paragraph(row[0], normal_style)
        value_p = Paragraph(row[1], normal_style)
        formatted_data_rows.append([key_p, value_p])

    col_widths = [width * 0.3, width * 0.7 - 2 * margin]
    data_table = Table(formatted_data_rows, colWidths=col_widths)
    data_table.setStyle(table_style)

    table_height = data_table.wrapOn(c, width - 2 * margin, height)[1]
    if y_pos - table_height < margin:
        c.showPage()
        y_pos = draw_header(c, height - 50)
        p = Paragraph("Dados Gerais da Obra (continua√ß√£o)", subheading_style)
        p.wrapOn(c, width - 2 * margin, height)
        p.drawOn(c, margin, y_pos - p.height)
        y_pos -= (p.height + 5)

    data_table.drawOn(c, margin, y_pos - table_height)
    y_pos -= (table_height + 15)

    # Efetivo de Pessoal
    p = Paragraph("Efetivo de Pessoal", subheading_style)
    p.wrapOn(c, width - 2 * margin, height)
    p.drawOn(c, margin, y_pos - p.height)
    y_pos -= (p.height + 5)

    if efetivo_lista:
        efetivo_header = ["Nome", "Fun√ß√£o", "Entrada", "Sa√≠da"]
        efetivo_data = [efetivo_header] + [[e['Nome'], e['Fun√ß√£o'], e['Entrada'], e['Sa√≠da']] for e in efetivo_lista]
        
        efetivo_table_style = TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), HexColor('#D3D3D3')), # Cinza claro para o cabe√ßalho
            ('TEXTCOLOR', (0, 0), (-1, 0), black),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 10),
            ('GRID', (0, 0), (-1, -1), 0.5, lightgrey),
            ('LEFTPADDING', (0,0), (-1,-1), 5),
            ('RIGHTPADDING', (0,0), (-1,-1), 5),
            ('TOPPADDING', (0,0), (-1,-1), 5),
            ('BOTTOMPADDING', (0,0), (-1,-1), 5),
        ])

        col_widths_efetivo = [(width - 2 * margin) / 4] * 4
        efetivo_table = Table(efetivo_data, colWidths=col_widths_efetivo)
        efetivo_table.setStyle(efetivo_table_style)

        table_height_efetivo = efetivo_table.wrapOn(c, width - 2 * margin, height)[1]
        if y_pos - table_height_efetivo < margin:
            c.showPage()
            y_pos = draw_header(c, height - 50)
            p = Paragraph("Efetivo de Pessoal (continua√ß√£o)", subheading_style)
            p.wrapOn(c, width - 2 * margin, height)
            p.drawOn(c, margin, y_pos - p.height)
            y_pos -= (p.height + 5)

        efetivo_table.drawOn(c, margin, y_pos - table_height_efetivo)
        y_pos -= (table_height_efetivo + 15)
    else:
        c.setFont("Helvetica", 10)
        c.drawString(margin, y_pos - 10, "Nenhum colaborador registrado para o dia.")
        y_pos -= 25

    # Informa√ß√µes Adicionais
    p = Paragraph("Informa√ß√µes Adicionais", subheading_style)
    p.wrapOn(c, width - 2 * margin, height)
    p.drawOn(c, margin, y_pos - p.height)
    y_pos -= (p.height + 5)

    info_adic_rows = [
        ["**Ocorr√™ncias:**", data.get("Ocorrencias", "")],
        ["**Respons√°vel pela empresa:**", data.get("Nome da Empresa", "")],
        ["**Nome da fiscaliza√ß√£o:**", data.get("Nome da Fiscalizacao", "")],
    ]
    
    formatted_info_adic_rows = []
    for row in info_adic_rows:
        key_p = Paragraph(row[0], normal_style)
        value_p = Paragraph(row[1], normal_style)
        formatted_info_adic_rows.append([key_p, value_p])

    info_adic_table = Table(formatted_info_adic_rows, colWidths=col_widths)
    info_adic_table.setStyle(table_style)

    table_height_info_adic = info_adic_table.wrapOn(c, width - 2 * margin, height)[1]
    if y_pos - table_height_info_adic < margin:
        c.showPage()
        y_pos = draw_header(c, height - 50)
        p = Paragraph("Informa√ß√µes Adicionais (continua√ß√£o)", subheading_style)
        p.wrapOn(c, width - 2 * margin, height)
        p.drawOn(c, margin, y_pos - p.height)
        y_pos -= (p.height + 5)

    info_adic_table.drawOn(c, margin, y_pos - table_height_info_adic)
    y_pos -= (table_height_info_adic + 15)

    # Inclus√£o de fotos (se houver)
    if image_paths:
        c.showPage()
        y_pos = draw_header(c, height - 50) # Redesenha cabe√ßalho
        p = Paragraph("Fotos do Servi√ßo", heading_style)
        p.wrapOn(c, width - 2 * margin, height)
        p.drawOn(c, margin, y_pos - p.height)
        y_pos -= (p.height + 10)

        img_width = (width - 3 * margin) / 2 # Largura para 2 imagens por linha
        img_height = 150 # Altura fixa para uniformidade
        current_x = margin
        row_count = 0

        for img_path in image_paths:
            if not os.path.exists(img_path):
                st.warning(f"Arquivo de imagem n√£o encontrado: {img_path}. Ser√° pulado no PDF.")
                continue

            try:
                img = ImageReader(img_path)
                aspect_ratio = img.getSize()[1] / img.getSize()[0]
                scaled_height = img_width * aspect_ratio
                
                # Se a imagem for muito alta, ajusta para a altura m√°xima e recalcula a largura
                if scaled_height > img_height:
                    scaled_width = img_height / aspect_ratio
                    scaled_height = img_height
                else:
                    scaled_width = img_width

                # Verifica se h√° espa√ßo para a imagem
                if y_pos - scaled_height - 20 < margin: # 20 de padding
                    c.showPage()
                    y_pos = draw_header(c, height - 50)
                    p = Paragraph("Fotos do Servi√ßo (continua√ß√£o)", heading_style)
                    p.wrapOn(c, width - 2 * margin, height)
                    p.drawOn(c, margin, y_pos - p.height)
                    y_pos -= (p.height + 10)
                    current_x = margin # Reseta X para nova p√°gina
                    row_count = 0

                c.drawImage(img, current_x, y_pos - scaled_height - 10, width=scaled_width, height=scaled_height, preserveAspectRatio=True, mask='auto')
                
                current_x += img_width + margin # Move para a pr√≥xima coluna
                row_count += 1

                if row_count % 2 == 0: # 2 imagens por linha
                    current_x = margin
                    y_pos -= (scaled_height + 20) # Move para a pr√≥xima linha
                    row_count = 0 # Reinicia contagem de colunas

            except Exception as e:
                st.warning(f"Erro ao incluir foto {img_path} no PDF: {e}")
        
        # Ajusta y_pos se a √∫ltima linha n√£o foi completa
        if row_count % 2 != 0:
            y_pos -= (scaled_height + 20)

    # Finaliza PDF
    c.save()
    buffer.seek(0)
    return buffer

# ‚úÖ FUN√á√ïES DE RENDERIZA√á√ÉO DE P√ÅGINAS

def render_login_page():
    """Renderiza a p√°gina de login e cria√ß√£o de conta."""
    create_usertable() # Garante que a tabela de usu√°rios existe
    st.title("Login RDV Engenharia")

    login_logo_b64 = get_img_as_base64(LOGO_LOGIN_PATH)
    if login_logo_b64:
        st.markdown(f"""
        <style>
        .login-logo {{
            text-align: center;
            margin-bottom: 20px;
        }}
        .login-logo img {{
            max-width: 250px; /* Ajuste o tamanho da logo */
            height: auto;
        }}
        </style>
        <div class="login-logo">
            <img src="data:image/png;base64,{login_logo_b64}">
        </div>
        """, unsafe_allow_html=True)
    else:
        st.header("Login") # Fallback se a logo n√£o carregar

    username = st.text_input("Usu√°rio", key="login_username")
    password = st.text_input("Senha", type='password', key="login_password")

    col1, col2 = st.columns(2)

    with col1:
        if st.button("Login", key="login_button"):
            user_info = login_user(username, password)
            if user_info:
                st.session_state.logged_in = True
                st.session_state.username = user_info["username"]
                st.session_state.role = user_info["role"]
                st.success(f"Bem-vindo(a), {st.session_state.username}! Voc√™ logou como {st.session_state.role}.")
                st.rerun() # Recarrega a p√°gina para exibir a interface logada
            else:
                st.error("Usu√°rio ou senha inv√°lidos.")
    with col2:
        if st.button("Criar Conta", key="show_create_account_button"):
            st.session_state.show_create_account = True
            st.rerun() # Recarrega para exibir o formul√°rio de cria√ß√£o

    # Formul√°rio de cria√ß√£o de nova conta
    if st.session_state.get('show_create_account', False):
        st.subheader("Criar Nova Conta")
        with st.form("create_new_user_form", clear_on_submit=True):
            new_username = st.text_input("Novo Usu√°rio", key="new_username_input")
            new_password = st.text_input("Nova Senha", type="password", key="new_password_input")
            new_role = st.selectbox("Fun√ß√£o", ["user", "admin"], key="new_role_select") # Permitir criar admin, mas com cuidado.
            create_account_submitted = st.form_submit_button("Registrar", key="register_new_user_button")

            if create_account_submitted:
                if new_username and new_password:
                    hashed_new_password = make_hashes(new_password)
                    if add_userdata(new_username, hashed_new_password, new_role):
                        st.success(f"Conta '{new_username}' criada com sucesso como '{new_role}'.")
                        st.session_state.show_create_account = False # Esconde ap√≥s criar
                        st.rerun() # Recarrega para voltar √† tela de login
                    else:
                        st.error(f"N√£o foi poss√≠vel criar a conta. O usu√°rio '{new_username}' j√° existe.")
                else:
                    st.error("Por favor, preencha todos os campos para criar uma nova conta.")

def render_diario_obra_page():
    """Renderiza a p√°gina principal do Relat√≥rio Di√°rio de Obra."""
    # Inicializa√ß√£o do estado para o slider de colaboradores
    # Usaremos 'num_colabs_slider' para controlar a quantidade de campos din√¢micos
    if 'num_colabs_slider' not in st.session_state:
        st.session_state.num_colabs_slider = 0 # Inicia com 0 para n√£o exibir campos antes de interagir

    st.title("Relat√≥rio Di√°rio de Obra - RDV Engenharia")

    # --- Carregamento de dados do Google Drive ---
    # As fun√ß√µes get_drive_service e load_data_from_drive s√£o cacheadas
    # para evitar m√∫ltiplos acessos desnecess√°rios ao Drive.
    
    obras_df = load_data_from_drive(DRIVE_FOLDER_ID, "obras.csv")
    contratos_df = load_data_from_drive(DRIVE_FOLDER_ID, "contratos.csv")
    colab_df = load_data_from_drive(DRIVE_FOLDER_ID, "colaboradores.csv")

    # Garante que os DataFrames n√£o est√£o vazios antes de tentar acess√°-los e usa as colunas corretas
    obras_lista = [""]
    if not obras_df.empty and 'Obra' in obras_df.columns:
        obras_lista = [""] + obras_df["Obra"].drop_duplicates().sort_values().tolist()
    else:
        st.warning("N√£o foi poss√≠vel carregar ou formatar 'obras.csv' do Google Drive. Verifique a pasta e o arquivo. Usando lista vazia de obras.")
    
    contratos_lista = [""]
    if not contratos_df.empty and 'Contrato' in contratos_df.columns:
        contratos_lista = [""] + contratos_df["Contrato"].drop_duplicates().sort_values().tolist()
    else:
        st.warning("N√£o foi poss√≠vel carregar ou formatar 'contratos.csv' do Google Drive. Verifique a pasta e o arquivo. Usando lista vazia de contratos.")

    colaboradores_lista = []
    if not colab_df.empty and {"Nome", "Fun√ß√£o"}.issubset(colab_df.columns):
        colaboradores_lista = colab_df["Nome"].drop_duplicates().sort_values().tolist()
    else:
        st.warning("N√£o foi poss√≠vel carregar ou formatar 'colaboradores.csv' do Google Drive. Certifique-se de que ele tem as colunas 'Nome' e 'Fun√ß√£o'. Usando lista vazia de colaboradores.")
    # --- Fim do carregamento de dados ---

    # ‚úÖ Se√ß√£o 1: Dados Gerais da Obra (FORA DO FORMUL√ÅRIO PRINCIPAL)
    # Estes campos s√£o renderizados independentemente do bot√£o de submit do formul√°rio final,
    # permitindo intera√ß√£o imediata (ex: sele√ß√£o de obra pode carregar outros dados).
    st.subheader("Dados Gerais da Obra")
    obra = st.selectbox("Obra", obras_lista, key="obra_select_top")
    local = st.text_input("Local", key="local_input_top")
    data = st.date_input("Data", value=datetime.today(), key="data_input_top")
    contrato = st.selectbox("Contrato", contratos_lista, key="contrato_select_top")
    clima = st.selectbox("Condi√ß√µes do dia",
                         ["Bom", "Chuva", "Garoa", "Impratic√°vel", "Feriado", "Guarda"],
                         key="clima_select_top")
    maquinas = st.text_area("M√°quinas e equipamentos utilizados", key="maquinas_text_top")
    servicos = st.text_area("Servi√ßos executados no dia", key="servicos_text_top")

    st.markdown("---") # Linha separadora visual

    # ‚úÖ Se√ß√£o 2: Efetivo de Pessoal (SLIDER E CAMPOS MOVIDOS PARA FORA DO FORMUL√ÅRIO PRINCIPAL)
    # Este slider controla dinamicamente a quantidade de campos de colaborador.
    # Por estar fora do `st.form`, sua intera√ß√£o causa uma re-execu√ß√£o imediata do script,
    # atualizando os campos em tempo real.
    st.subheader("Efetivo de Pessoal")
    max_colabs_for_slider = len(colaboradores_lista) if colaboradores_lista else 20

    qtd_colaboradores_input = st.slider(
        "Quantos colaboradores hoje?",
        min_value=0,
        max_value=max_colabs_for_slider,
        value=st.session_state.num_colabs_slider, # O valor inicial vem do session_state
        step=1,
        key="slider_colabs_dynamic", # Chave √∫nica para este slider
        # on_change √© importante para atualizar o session_state imediatamente ao mover o slider
        on_change=lambda: st.session_state.update(num_colabs_slider=st.session_state.slider_colabs_dynamic)
    )

    efetivo_lista = []
    # O loop `for` abaixo √© renderizado com base no valor ATUAL de `qtd_colaboradores_input`,
    # que √© atualizado a cada intera√ß√£o com o slider.
    for i in range(qtd_colaboradores_input):
        with st.expander(f"Colaborador {i+1}", expanded=True):
            nome = st.selectbox("Nome", [""] + colaboradores_lista, key=f"colab_nome_dynamic_{i}")
            funcao = ""
            # Preenche a fun√ß√£o automaticamente se o nome for selecionado e existir no DataFrame
            if nome and not colab_df.empty and nome in colab_df["Nome"].values:
                funcao = colab_df.loc[colab_df["Nome"] == nome, "Fun√ß√£o"].values[0]
            
            funcao = st.text_input("Fun√ß√£o", value=funcao, key=f"colab_funcao_dynamic_{i}")
            
            col1, col2 = st.columns(2)
            with col1:
                entrada = st.time_input("Entrada",
                                        value=datetime.strptime("08:00", "%H:%M").time(),
                                        key=f"colab_entrada_dynamic_{i}")
            with col2:
                saida = st.time_input("Sa√≠da",
                                       value=datetime.strptime("17:00", "%H:%M").time(),
                                       key=f"colab_saida_dynamic_{i}")
            
            efetivo_lista.append({
                "Nome": nome,
                "Fun√ß√£o": funcao,
                "Entrada": entrada.strftime("%H:%M"),
                "Sa√≠da": saida.strftime("%H:%M")
            })

    st.markdown("---") # Linha separadora visual

    # ‚úÖ FORMUL√ÅRIO PRINCIPAL DE SUBMISS√ÉO (AGORA APENAS INFORMA√á√ïES ADICIONAIS E BOT√ÉO)
    # Este formul√°rio agrupa as informa√ß√µes adicionais e o bot√£o de submit.
    # Os valores dos campos FORA deste form (`obra`, `local`, `maquinas`, etc.)
    # ser√£o acessados diretamente no bloco `if submitted:`.
    with st.form(key="relatorio_final_submit_form", clear_on_submit=False):
        # Se√ß√£o 3: Informa√ß√µes Adicionais (Pode continuar dentro do form)
        st.subheader("Informa√ß√µes Adicionais")
        ocorrencias = st.text_area("Ocorr√™ncias", key="ocorrencias_text_form")
        nome_empresa = st.text_input("Respons√°vel pela empresa", key="responsavel_input_form")
        nome_fiscal = st.text_input("Nome da fiscaliza√ß√£o", key="fiscalizacao_input_form")
        
        fotos = st.file_uploader("Fotos do servi√ßo",
                                accept_multiple_files=True,
                                type=["png", "jpg", "jpeg"],
                                key="fotos_uploader_form")

        # Bot√£o de submit (DENTRO do form)
        submitted = st.form_submit_button("‚úÖ Salvar e Gerar Relat√≥rio", key="submit_button_main")

    # L√≥gica de processamento ap√≥s submiss√£o (CORRETAMENTE FORA do form)
    if submitted:
        temp_image_paths = []
        temp_dir_obj_for_cleanup = None # Garante que a vari√°vel √© inicializada

        try:
            # Valida√ß√µes dos campos que estavam fora do form mas s√£o cruciais para o relat√≥rio
            if not obra or obra == "":
                st.error("Por favor, selecione a 'Obra'.")
                return # Retorna para n√£o continuar a execu√ß√£o em caso de erro
            if not contrato or contrato == "":
                st.error("Por favor, selecione o 'Contrato'.")
                return
            if not nome_empresa:
                st.error("Por favor, preencha o campo 'Respons√°vel pela empresa'.")
                return
            
            # Coleta de dados do formul√°rio (incluindo os que foram definidos fora do form principal)
            report_data = {
                "Obra": obra,
                "Local": local,
                "Data": data.strftime("%d/%m/%Y"), # Converte a data para string formatada
                "Contrato": contrato,
                "Clima": clima,
                "Maquinas": maquinas,
                "Servicos": servicos,
                "Ocorrencias": ocorrencias,
                "Nome da Empresa": nome_empresa,
                "Nome da Fiscalizacao": nome_fiscal,
            }

            # Processa e salva fotos temporariamente
            if fotos:
                # Cria um diret√≥rio tempor√°rio para salvar as fotos
                temp_dir_obj = tempfile.TemporaryDirectory()
                temp_dir_path = Path(temp_dir_obj.name)
                temp_dir_obj_for_cleanup = temp_dir_obj # Guarda para limpeza posterior

                with st.spinner("Processando fotos..."):
                    for uploaded_file in fotos:
                        # Sanitiza o nome do arquivo para evitar problemas de caminho
                        sanitized_name = "".join(c for c in uploaded_file.name if c.isalnum() or c in ('.', '_', '-')).strip()
                        if not sanitized_name:
                            # Fallback para nome √∫nico se o nome sanitizado for vazio
                            sanitized_name = f"foto_temp_{datetime.now().strftime('%Y%m%d%H%M%S%f')}.jpg"
                        
                        temp_img_path = temp_dir_path / sanitized_name
                        try:
                            with open(temp_img_path, "wb") as f:
                                f.write(uploaded_file.read())
                            temp_image_paths.append(str(temp_img_path))
                        except Exception as e:
                            st.warning(f"N√£o foi poss√≠vel salvar a foto '{uploaded_file.name}' temporariamente: {e}")
                    
                    if not temp_image_paths and fotos:
                        st.warning("‚ö†Ô∏è Nenhuma foto foi processada. O PDF pode n√£o conter imagens.")
            
            # Gera√ß√£o do PDF
            pdf_file_name = f"RDV_{obra.replace(' ', '_')}_{data.strftime('%Y%m%d')}.pdf"
            pdf_buffer = io.BytesIO() # Buffer para o PDF

            with st.spinner("Gerando PDF..."):
                generate_pdf(report_data, efetivo_lista, pdf_buffer, temp_image_paths, get_drive_service(), DRIVE_FOLDER_ID)
                
                if pdf_buffer is None or pdf_buffer.getvalue() == b'':
                    st.error("Falha cr√≠tica ao gerar o PDF. O buffer est√° vazio. Por favor, tente novamente ou verifique os logs para detalhes.")
                    return
                
                # Bot√£o de download do PDF
                st.download_button(
                    label="üì• Baixar Relat√≥rio PDF",
                    data=pdf_buffer.getvalue(), # Conte√∫do do buffer para download
                    file_name=pdf_file_name,
                    mime="application/pdf",
                    type="primary"
                )

            # Upload do PDF para o Google Drive
            drive_id = None
            with st.spinner("Enviando relat√≥rio para o Google Drive..."):
                pdf_buffer.seek(0) # Volta o ponteiro do buffer para o in√≠cio para leitura
                service = get_drive_service()
                
                # Cria uma subpasta di√°ria no Drive para organizar os PDFs
                today_folder_name = datetime.now().strftime("%Y-%m-%d")
                daily_folder_id = create_drive_folder_if_not_exists(service, DRIVE_FOLDER_ID, today_folder_name)
                
                if daily_folder_id:
                    drive_id = upload_file_to_drive(service, daily_folder_id, pdf_file_name, pdf_buffer.getvalue(), "application/pdf")

                    if drive_id:
                        st.success(f"PDF salvo com sucesso no Google Drive! ID: {drive_id}")
                        st.markdown(f"**[Clique aqui para abrir no Google Drive](https://drive.google.com/file/d/{drive_id}/view)**")

                        # Enviar e-mail de notifica√ß√£o
                        with st.spinner("Enviando e-mail de notifica√ß√£o..."):
                            assunto_email = f"üìã Novo Di√°rio de Obra - {obra} ({data.strftime('%d/%m/%Y')})"
                            corpo_email_html = f"""
                            <p>Ol√°, equipe RDV!</p>
                            <p>O di√°rio de obra foi preenchido com sucesso:</p>
                            <ul>
                                <li><strong>Obra:</strong> {obra}</li>
                                <li><strong>Local:</strong> {local}</li>
                                <li><strong>Data:</strong> {data.strftime('%d/%m/%Y')}</li>
                                <li><strong>Respons√°vel:</strong> {nome_empresa}</li>
                            </ul>
                            <p>Voc√™ pode acessar o relat√≥rio diretamente no Google Drive atrav√©s deste link: <a href="https://drive.google.com/file/d/{drive_id}/view">Abrir no Google Drive</a></p>
                            <p>Atenciosamente,</p>
                            <p>Equipe RDV Engenharia</p>
                            """
                            destinatarios_email = [
                                "comercial@rdvengenharia.com.br", # Adicione os emails de destino
                                "administrativo@rdvengenharia.com.br"
                            ]
                            
                            if send_email(assunto_email, corpo_email_html, destinatarios_email, attachments=None):
                                st.success("üì® E-mail de notifica√ß√£o enviado com sucesso!")
                            else:
                                st.warning("""
                                ‚ö†Ô∏è O PDF foi salvo no Google Drive, mas o e-mail de notifica√ß√£o n√£o foi enviado.
                                Por favor, verifique os detalhes do erro acima ou nos logs para depura√ß√£o.
                                **Poss√≠veis solu√ß√µes:**
                                1. Verifique sua conex√£o com a internet.
                                2. Confira as configura√ß√µes de e-mail (usu√°rio e senha) no seu arquivo `.streamlit/secrets.toml`.
                                3. Certifique-se de estar usando uma **Senha de Aplicativo (App Password)** do Gmail para a senha, se a Verifica√ß√£o em Duas Etapas estiver ativada na sua conta de e-mail.
                                """)
                    else:
                        st.error("O upload do PDF para o Google Drive falhou. O e-mail de notifica√ß√£o n√£o foi enviado.")
                else:
                    st.error("N√£o foi poss√≠vel criar/encontrar a pasta di√°ria no Google Drive. O upload do PDF falhou.")

        except Exception as e:
            st.error(f"Ocorreu um erro inesperado durante o processamento do relat√≥rio: {str(e)}. Por favor, tente novamente.")
        finally:
            # Limpeza de arquivos tempor√°rios de fotos
            if temp_dir_obj_for_cleanup:
                try:
                    temp_dir_obj_for_cleanup.cleanup() # Limpa o diret√≥rio tempor√°rio das fotos
                except Exception as e:
                    st.warning(f"Erro ao tentar limpar diret√≥rio tempor√°rio de fotos: {str(e)}. Por favor, verifique os logs.")

def render_user_management_page():
    """Renderiza a p√°gina de gerenciamento de usu√°rios (apenas para administradores)."""
    st.title("Gerenciamento de Usu√°rios")

    if st.session_state.role != "admin":
        st.warning("Voc√™ n√£o tem permiss√£o para acessar esta p√°gina.")
        return

    st.subheader("Adicionar Novo Usu√°rio")
    with st.form("add_user_form", clear_on_submit=True):
        new_username = st.text_input("Nome de Usu√°rio", key="add_user_username")
        new_password = st.text_input("Senha", type="password", key="add_user_password")
        new_role = st.selectbox("Fun√ß√£o", ["user", "admin"], key="add_user_role")
        add_user_submitted = st.form_submit_button("Adicionar Usu√°rio", key="add_user_submit_button")

        if add_user_submitted:
            if new_username and new_password:
                hashed_new_password = make_hashes(new_password)
                if add_userdata(new_username, hashed_new_password, new_role):
                    st.success(f"Usu√°rio '{new_username}' adicionado com sucesso como '{new_role}'.")
                else:
                    st.error(f"N√£o foi poss√≠vel adicionar o usu√°rio '{new_username}'. Ele j√° existe ou ocorreu um erro.")
            else:
                st.error("Preencha todos os campos para adicionar um novo usu√°rio.")

    st.subheader("Usu√°rios Existentes")
    user_data = view_all_users()
    df_users = pd.DataFrame(user_data, columns=['Username', 'Role']) # N√£o exibir senhas
    st.dataframe(df_users)


# ‚úÖ L√ìGICA PRINCIPAL DO APP

if __name__ == "__main__":
    # Inicializa√ß√£o do estado da sess√£o do Streamlit
    if 'logged_in' not in st.session_state:
        st.session_state.logged_in = False
    if 'username' not in st.session_state:
        st.session_state.username = None
    if 'role' not in st.session_state:
        st.session_state.role = None
    if 'page' not in st.session_state:
        st.session_state.page = "login" # P√°gina inicial √© o login
    if 'show_create_account' not in st.session_state:
        st.session_state.show_create_account = False # Estado para controlar o formul√°rio de cria√ß√£o de conta

    # Limpa o arquivo tempor√°rio do √≠cone (se houver) ao iniciar/encerrar a sess√£o
    clear_icon_temp_file()

    # Cria a tabela de usu√°rios se n√£o existir
    create_usertable()
    
    # Bloco para criar o primeiro admin, se necess√°rio.
    # DEVE SER REMOVIDO OU DESABILITADO AP√ìS A CRIA√á√ÉO DO PRIMEIRO ADMIN NO DEPLOY FINAL POR SEGURAN√áA.
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('SELECT COUNT(*) FROM userstable WHERE role = "admin"')
    admin_count = c.fetchone()[0]
    conn.close() # Feche a conex√£o imediatamente ap√≥s a consulta

    if admin_count == 0 and not st.session_state.logged_in: # S√≥ mostra se n√£o h√° admins e n√£o est√° logado
        st.info("Parece que n√£o h√° administradores registrados. Por favor, crie o primeiro admin para continuar.")
        with st.form("create_first_admin_form", clear_on_submit=True):
            first_admin_username = st.text_input("Usu√°rio do Primeiro Admin", value="admin_rdv", key="first_admin_user_input")
            first_admin_password = st.text_input("Senha do Primeiro Admin", type="password", value="admin_rdv_senha", key="first_admin_pass_input")
            create_admin_button = st.form_submit_button("Criar Primeiro Admin", key="create_first_admin_button_submit")

            if create_admin_button:
                if first_admin_username and first_admin_password:
                    hashed_password = make_hashes(first_admin_password)
                    if add_userdata(first_admin_username, hashed_password, "admin"):
                        st.success(f"Usu√°rio '{first_admin_username}' criado com sucesso como 'admin'. Por favor, use-o para logar.")
                        st.warning("üö® **ATEN√á√ÉO:** Altere a senha padr√£o IMEDIATAMENTE ap√≥s o primeiro login. Remova ou desabilite este bloco no seu deploy final para maior seguran√ßa!")
                        st.session_state.show_create_account = False # Resetar se for para login
                        st.rerun() # For√ßa a re-execu√ß√£o para ir para a tela de login
                    else:
                        st.error("N√£o foi poss√≠vel criar o usu√°rio admin. Talvez j√° exista um usu√°rio com esse nome. Tente fazer login.")
                else:
                    st.error("Preencha o nome de usu√°rio e a senha para o primeiro admin.")
        # Se estamos neste bloco (admin_count == 0 e n√£o logado), n√£o renderize mais nada por enquanto
        st.stop() # Interrompe a execu√ß√£o para n√£o continuar para o login/p√°ginas
    
    # Se j√° h√° admins ou o admin acabou de ser criado, prosseguir para o login ou para a p√°gina logada
    if not st.session_state.logged_in:
        render_login_page()
    else:
        # Se√ß√µes da barra lateral
        st.sidebar.title(f"Bem-vindo(a), {st.session_state.username}!")
        st.sidebar.write(f"Fun√ß√£o: **{st.session_state.role.upper()}**")

        page_options = ["Di√°rio de Obra"]
        if st.session_state.role == "admin":
            page_options.append("Gerenciamento de Usu√°rios")
        page_options.append("Sair")
        
        selected_page = st.sidebar.radio("Navega√ß√£o", page_options, key="main_navigation")

        # L√≥gica de navega√ß√£o
        if selected_page == "Di√°rio de Obra":
            render_diario_obra_page()
        elif selected_page == "Gerenciamento de Usu√°rios":
            if st.session_state.role == "admin": # Verifica√ß√£o extra de seguran√ßa
                render_user_management_page()
            else:
                st.error("Acesso negado: Voc√™ n√£o tem permiss√£o para gerenciar usu√°rios.")
                # Redireciona para a p√°gina padr√£o se tentar acessar sem permiss√£o
                st.session_state.page = "Di√°rio de Obra" 
                st.rerun()
        elif selected_page == "Sair":
            st.session_state.logged_in = False
            st.session_state.username = None
            st.session_state.role = None
            st.session_state.page = "login" # Redireciona para a p√°gina de login
            st.success("Deslogado com sucesso.")
            st.rerun() # For√ßa a re-execu√ß√£o para limpar a interface e mostrar o login
